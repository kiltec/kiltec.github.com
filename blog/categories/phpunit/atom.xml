<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Phpunit | Lars Tesmer's Blog]]></title>
  <link href="http://www.lars-tesmer.com/blog/categories/phpunit/atom.xml" rel="self"/>
  <link href="http://www.lars-tesmer.com/"/>
  <updated>2014-07-28T13:32:26+02:00</updated>
  <id>http://www.lars-tesmer.com/</id>
  <author>
    <name><![CDATA[Lars Tesmer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What My Co-Workers and I Learned When Trying to Write Unit Tests for PHPUnit]]></title>
    <link href="http://www.lars-tesmer.com/blog/2011/09/08/what-my-co---workers-and-i-learned-when-trying-to-write-unit-tests-for-phpunit/"/>
    <updated>2011-09-08T23:06:00+02:00</updated>
    <id>http://www.lars-tesmer.com/blog/2011/09/08/what-my-co---workers-and-i-learned-when-trying-to-write-unit-tests-for-phpunit</id>
    <content type="html"><![CDATA[<p>Today a bunch of co-workers and me got together right after work to hone our skills, more specifically, our unit testing skills.<br/>
A couple of weeks before, I had discovered that the code coverage of <a href="https://github.com/sebastianbergmann/phpunit/">PHPUnit</a> is only at ~55%, so I thought it would be a great exercise for our after work hacking to help increase its code coverage by writing unit tests for it.</p>

<p>The plan was to try and write as many tests as we could for the <a href="https://github.com/sebastianbergmann/phpunit/tree/master/PHPUnit/Framework/Constraint">Constraint classes</a> PHPUnit uses to implement its assertions.<br/>
Those Constraint classes are pretty small, fairly easy to understand and not entirely covered by tests &ndash; in short, very well suited for our group, a mix of programmers having quite some experience in unit testing as well as others just having started to learn unit testing.</p>

<p>Well, our plan didn&rsquo;t work out that way, we didn&rsquo;t really succeed in writing a considerable amount of unit tests.<br/>
However, it still was a valuable experience, as it turned out the unit tests of the Constraints are a good example of how not to unit test.</p>

<p>So here&rsquo;s what we learned (or were reminded of):</p>

<!-- more -->


<h3>1. Don&rsquo;t use one single test case class to test several different classes</h3>

<p>The unit tests for the constraint classes of PHPUnit are lumped together <a href="https://github.com/sebastianbergmann/phpunit/blob/3.5/Tests/Framework/ConstraintTest.php">in one large file</a>. I think the reasoning behind that might have been that all constraints derive from the same parent class, <em>PHPUnit_Framework_Constraint</em>.<br/>
Don&rsquo;t do that.<br/>
It renders it quite hard to find your way to the tests for one of the constraints, it&rsquo;s quite annoying to navigate through that class.<br/>
If each class has its own test case, it&rsquo;s much easier to find its test, too.</p>

<h3>2. Name your tests well</h3>

<p>You should name your tests such that they convey the intent of the test, describe what the test is about and how they&rsquo;re different from other tests. <br/>
The tests in <a href="https://github.com/sebastianbergmann/phpunit/blob/3.5/Tests/Framework/ConstraintTest.php">ConstraintTest.php</a> wear names like:</p>

<ul>
<li>testConstraintIsEmpty</li>
<li>testConstraintPCREMatch</li>
<li>testConstraintClassNotHasStaticAttribute</li>
<li>testConstraintStringMatches</li>
<li>testConstraintStringMatches2</li>
<li>testConstraintStringMatches3</li>
<li>testConstraintStringMatches4</li>
<li>testConstraintStringMatches5</li>
<li>testConstraintStringMatches6 (sic!)</li>
</ul>


<p>It&rsquo;s really hard to understand what&rsquo;s going on in tests named in such a way.</p>

<h3>3. Avoid to test more than one behaviour in one single test</h3>

<p>The tests in ConstraintTest.php test a lot of behavior in one single test, here&rsquo;s an example:</p>

<p>``` php Whoa! A lot of stuff going on in here!</p>

<pre><code>/**
 * @covers PHPUnit_Framework_Constraint_IsType
 * @covers PHPUnit_Framework_Assert::isType
 * @covers PHPUnit_Framework_Constraint::count
 * @covers PHPUnit_Framework_TestFailure::exceptionToString
 */
public function testConstraintIsType()
{
    $constraint = PHPUnit_Framework_Assert::isType('string');

    $this-&gt;assertFalse($constraint-&gt;evaluate(0, '', TRUE));
    $this-&gt;assertTrue($constraint-&gt;evaluate('', '', TRUE));
    $this-&gt;assertEquals('is of type "string"', $constraint-&gt;toString());
    $this-&gt;assertEquals(1, count($constraint));

    try {
        $constraint-&gt;evaluate(new stdClass);
    }

    catch (PHPUnit_Framework_ExpectationFailedException $e) {
        $this-&gt;assertEquals(&lt;&lt;&lt;EOF
</code></pre>

<p>Failed asserting that stdClass Object () is of type &ldquo;string&rdquo;.</p>

<p>EOF</p>

<pre><code>          ,
          self::trimnl(PHPUnit_Framework_TestFailure::exceptionToString($e))
        );

        return;
    }

    $this-&gt;fail();
}
</code></pre>

<p>```
Especially in conjunction with #2, this makes it really hard to figure out what a given test is supposed to test. In our practice group we sat in pairs in front of our laptops and yet it still took us quite some time to find out what those tests were actually doing.</p>

<p>If you find yourself writing more than one assertion in a single test, take your hands from the keyboard and find out whether you&rsquo;re about to test more than a single behavior.<br/>
Otherwise you will probably curse yourself when you come back to that test code in, say, 6 months&hellip;</p>

<h3>Conclusion</h3>

<p>If you plan to introduce others to unit testing by letting them loose on a real world codebase, I&rsquo;d suggest not to pick PHPUnit, as ironic as it may sound.<br/>
PHPUnit itself is a very valuable tool and I&rsquo;m very grateful for its existence, I&rsquo;m using it daily at work. Yet, its test are no good example of how to write good unit tests, working on those tests will cause quite some confusion especially among programmers new to unit testing.</p>

<p>Anyways, for our next practice group meeting we&rsquo;ll choose something more appropriate, we&rsquo;re thinking about trying our luck on <a href="https://github.com/kriswallsmith/assetic">Symfony&rsquo;s Assetic</a>.</p>

<p>However, we will very probably come back to PHPUnit at some point in the future in order to try and refactor its tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPUnit: Better Syntax for Expecting Exceptions]]></title>
    <link href="http://www.lars-tesmer.com/blog/2011/08/29/phpunit-better-syntax-for-expecting-exceptions/"/>
    <updated>2011-08-29T18:32:00+02:00</updated>
    <id>http://www.lars-tesmer.com/blog/2011/08/29/phpunit-better-syntax-for-expecting-exceptions</id>
    <content type="html"><![CDATA[<p>Recently, while starting to learn Ruby, I&rsquo;ve stumbled upon the following code snippet
which demonstrates how you can assert that a piece of code throws as exception in Ruby&rsquo;s Test::Unit:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Expecting exceptions in Test::Unit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_some_important_method</span><span class="p">()</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;some_obj = new SomeObj</span>
</span><span class='line'><span class="sr"># Potentially large amount of code</span>
</span><span class='line'>
</span><span class='line'><span class="sr">assert_raise InvalidArgumentException do</span>
</span><span class='line'><span class="sr">    some_obj.someMethod</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Check out lines 5-7 &ndash; isn&rsquo;t this a really elegant and readable way of expecting an exception?
Now let&rsquo;s contrast this with how it&rsquo;s done in PHPUnit:</p>

<!--more-->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Current way of expecting exceptions in PHPUnit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="o">/&lt;</span><span class="nx">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="o">@</span><span class="nx">expectedException</span> <span class="nx">InvalidArgumentException</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testSomeImportantMethod</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$some_obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SomeObj</span><span class="p">();</span>
</span><span class='line'><span class="c1">// Potentially large amount of code</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$some_obj</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">someMethod</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Well, that isn&rsquo;t too horrible but I&rsquo;ve never been really happy with this.<br/>
My main issues with this way of expecting exceptions are:</p>

<p>The expectation is pretty far away from the location you&rsquo;d normally expect to find an assertion.
Usually, an assertion can be found at the bottom of each test function, whereas with the current method PHPUnit uses,
it&rsquo;s at the <em>top</em> of the test-function.</p>

<p>Additionally, it&rsquo;s an annotation &ldquo;buried&rdquo; in a comment which is easy to miss.</p>

<p>Finally, PHPUnit will watch for an exception thrown by <em>any</em> of the code inside the test-function. Normally,
it&rsquo;s the last line of the test-function, so it isn&rsquo;t hard to find &ndash; but what if the expected exception is thrown in
a line <em>before</em> the last line, maybe due to a bug?</p>

<p>So, is there a way to mimic the method of Test::Unit in PHPUnit?<br/>
As you may have guessed, there is one, using anonymous functions and closures, which are available since PHP 5.3!</p>

<p>Here&rsquo;s the code for a simple function we can use to check if a given piece of code throws an exception:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">assertThrowsException</span><span class="p">(</span><span class="nv">$exception_name</span><span class="p">,</span> <span class="nv">$code</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$e</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="k">try</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$code</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// No more code, we only want to catch the exception in $e</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$e</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nv">$e</span> <span class="nx">instanceof</span> <span class="nv">$exception_name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Correct exception thrown!</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Incorrect exception thrown!</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Confused?<br/>
Well, the most important line of that function is line 5.  <br/>
There, the anonymous function that was passed into the function as the second argument gets executed, which allows
us to catch any exception thrown by it.</p>

<p>Still confused? Let&rsquo;s check out an example:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Let&rsquo;s throw an exception, yay! </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ExceptionThrower</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nx">\InvalidArgumentException</span><span class="p">(</span><span class="s2">&quot;I&#39;m an exception&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExceptionThrower</span><span class="p">();</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">assertThrowsException</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">InvalidArgumentException</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$subject</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="nv">$subject</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">execute</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The magic happens in lines 10-13:<br/>
The <em>execute</em>-method of ExceptionThrower doesn&rsquo;t get executed immediately because it&rsquo;s wrapped in an anonymous function, i.e.
<em>execute</em> will only be invoked when we call the anonymous function contained in <em>$code</em> in line 5 of <em>assertThrowsException()</em>.</p>

<p>Now one question remains &ndash; can this be done in PHPUnit with a &ldquo;proper&rdquo; assertion?<br/>
Yes, it can!</p>

<p>I won&rsquo;t post the full code into this blog, it would be a bit too much but you can find the code adding a new assertion
<em>assertThrowsException()</em> in the following commit to my fork of PHPUnit 3.5:<br/>
<a href="https://github.com/kiltec/phpunit/commit/dd5c7bd71d6eb8d4b58ce79b5ae069fbb0734354">Link to Github commit</a><br/>
Note that this code is not production-ready, it&rsquo;s a proof-of-concept with just enough code to get PHPUnit to run the
new assertion without throwing a fit, just so I could find out whether such a new assertion would be possible at all.</p>

<p>Anyway, with the new assertion the PHPUnit test-method from the beginning of this blog would look like this:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testSomeImportantMethod</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$someClass</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SomeClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">assertThrowsException</span><span class="p">(</span><span class="s1">&#39;InvalidArgumentException&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span><span class="p">(</span><span class="nv">$someClass</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$someClass</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">someMethod</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Granted, you have more to type than in the current way but in my opinion, this offers more control and is more expressive and I&rsquo;d prefer
expressiveness over terseness any day.</p>

<p>What do you think, should I turn this into a real patch for PHPUnit?<br/>
Or am I just crazy? ;)</p>
]]></content>
  </entry>
  
</feed>
