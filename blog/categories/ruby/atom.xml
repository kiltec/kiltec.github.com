<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Lars Tesmer's Blog]]></title>
  <link href="http://www.lars-tesmer.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.lars-tesmer.com/"/>
  <updated>2014-07-28T15:45:08+02:00</updated>
  <id>http://www.lars-tesmer.com/</id>
  <author>
    <name><![CDATA[Lars Tesmer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Review: Eloquent Ruby by Russ Olsen]]></title>
    <link href="http://www.lars-tesmer.com/blog/2011/09/04/review-eloquent-ruby-by-russ-olsen/"/>
    <updated>2011-09-04T13:17:00+02:00</updated>
    <id>http://www.lars-tesmer.com/blog/2011/09/04/review-eloquent-ruby-by-russ-olsen</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://lars-tesmer.com/images/books/eloquent_ruby.jpg">http://lars-tesmer.com/images/books/eloquent_ruby.jpg</a>">
If you want to learn Ruby and you already know another programming language, <a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104">Eloquent Ruby by Russ Olsen</a> is a book you absolutely should read. Heck, even if you do <em>not</em> want to learn Ruby, you might want to read it because, who knows, it might give you <a href="http://lars-tesmer.com/blog/2011/08/29/phpunit-better-syntax-for-expecting-exceptions/">ideas for the programming language you currently use</a>.</p>

<p>So, why do I think this way?</p>

<!-- more -->


<p>For starters, this book is really well written, it never gets boring, it isn&rsquo;t a dry explanation of yet another programming language &ndash; it&rsquo;s simply an enjoyable read.</p>

<p>More importantly, it doesn&rsquo;t suffer from the mistake of oh so many other books:<br/>
As an experienced programmer it&rsquo;s really painful having to suffer through chapter after chapter explaining, for example, what an if-statement is, or that there are such things as, gasp!, loops.</p>

<p>In <a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104">Eloquent Ruby</a> there&rsquo;s none of that. Or when there is, it&rsquo;s written in a way that&rsquo;s not treating you like a programmer on his first day.<br/>
<em>Eloquent Ruby</em> does not only teach you the syntax but teaches you <em>idiomatic</em> Ruby, so you&rsquo;ll be able to write Ruby that actually looks like Ruby.</p>

<p>The book consists of four large sections. The first section introduces you to the basics of Ruby, the second deals about the possibilities offered by classes, modules and blocks in Ruby.<br/>
The third section is where it gets <em>really</em> meaty, you&rsquo;re introduced to the power (and dangers) of metaprogramming. The final section is about pulling everything you&rsquo;ve learned so far together, e.g. by showing how to build both internal and external DSLs with Ruby.</p>

<p>I really like the way each chapter is structured:<br/>
Every chapter first teaches you to the basic concepts of the topic at hand, giving lots of code examples.<br/>
More importantly, each chapters closes with the same three subsections:</p>

<ul>
<li>In the Wild</li>
<li>Staying Out of Trouble and</li>
<li>Wrapping up</li>
</ul>


<p><em>In the Wild</em> features real world examples, using the concepts you&rsquo;ve been familiarized with in the previous subsections of the chapter code taken from actually existing software.<br/>
<em>Staying Out of Trouble</em> helps you to avoid any pitfalls you could fall into when applying the stuff you&rsquo;ve just learned. I&rsquo;ve found those sections to be especially useful.<br/>
<em>Wrapping up</em> does what its name suggests: Summing up what&rsquo;s been covered in the current chapter in a mere paragraph, allowing you to review what you&rsquo;ve just learned.</p>

<p>In conclusion, if you&rsquo;re an aspiring Ruby programmer, do yourself a favour and <a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104">get this most excellent book</a>.
And while you&rsquo;re at it, check out the equally excellent <a href="http://www.amazon.com/Ruby-Best-Practices-Gregory-Brown/dp/0596523009/">Ruby Best Practices</a> by Gregory T. Brown, too! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPUnit: Better Syntax for Expecting Exceptions]]></title>
    <link href="http://www.lars-tesmer.com/blog/2011/08/29/phpunit-better-syntax-for-expecting-exceptions/"/>
    <updated>2011-08-29T18:32:00+02:00</updated>
    <id>http://www.lars-tesmer.com/blog/2011/08/29/phpunit-better-syntax-for-expecting-exceptions</id>
    <content type="html"><![CDATA[<p>Recently, while starting to learn Ruby, I&rsquo;ve stumbled upon the following code snippet
which demonstrates how you can assert that a piece of code throws as exception in Ruby&rsquo;s Test::Unit:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Expecting exceptions in Test::Unit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_some_important_method</span><span class="p">()</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;some_obj = new SomeObj</span>
</span><span class='line'><span class="sr"># Potentially large amount of code</span>
</span><span class='line'>
</span><span class='line'><span class="sr">assert_raise InvalidArgumentException do</span>
</span><span class='line'><span class="sr">    some_obj.someMethod</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Check out lines 5-7 &ndash; isn&rsquo;t this a really elegant and readable way of expecting an exception?
Now let&rsquo;s contrast this with how it&rsquo;s done in PHPUnit:</p>

<!--more-->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Current way of expecting exceptions in PHPUnit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="o">/&lt;</span><span class="nx">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="o">@</span><span class="nx">expectedException</span> <span class="nx">InvalidArgumentException</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testSomeImportantMethod</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$some_obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SomeObj</span><span class="p">();</span>
</span><span class='line'><span class="c1">// Potentially large amount of code</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$some_obj</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">someMethod</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Well, that isn&rsquo;t too horrible but I&rsquo;ve never been really happy with this.<br/>
My main issues with this way of expecting exceptions are:</p>

<p>The expectation is pretty far away from the location you&rsquo;d normally expect to find an assertion.
Usually, an assertion can be found at the bottom of each test function, whereas with the current method PHPUnit uses,
it&rsquo;s at the <em>top</em> of the test-function.</p>

<p>Additionally, it&rsquo;s an annotation &ldquo;buried&rdquo; in a comment which is easy to miss.</p>

<p>Finally, PHPUnit will watch for an exception thrown by <em>any</em> of the code inside the test-function. Normally,
it&rsquo;s the last line of the test-function, so it isn&rsquo;t hard to find &ndash; but what if the expected exception is thrown in
a line <em>before</em> the last line, maybe due to a bug?</p>

<p>So, is there a way to mimic the method of Test::Unit in PHPUnit?<br/>
As you may have guessed, there is one, using anonymous functions and closures, which are available since PHP 5.3!</p>

<p>Here&rsquo;s the code for a simple function we can use to check if a given piece of code throws an exception:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">function</span> <span class="nf">assertThrowsException</span><span class="p">(</span><span class="nv">$exception_name</span><span class="p">,</span> <span class="nv">$code</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$e</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'><span class="k">try</span><span class="p">{</span>
</span><span class='line'>    <span class="nv">$code</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span><span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// No more code, we only want to catch the exception in $e</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$e</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nv">$e</span> <span class="nx">instanceof</span> <span class="nv">$exception_name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Correct exception thrown!</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Incorrect exception thrown!</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Confused?<br/>
Well, the most important line of that function is line 5.  <br/>
There, the anonymous function that was passed into the function as the second argument gets executed, which allows
us to catch any exception thrown by it.</p>

<p>Still confused? Let&rsquo;s check out an example:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Let&rsquo;s throw an exception, yay! </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ExceptionThrower</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nx">\InvalidArgumentException</span><span class="p">(</span><span class="s2">&quot;I&#39;m an exception&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$subject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExceptionThrower</span><span class="p">();</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">assertThrowsException</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">InvalidArgumentException</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$subject</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>    <span class="nv">$subject</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">execute</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The magic happens in lines 10-13:<br/>
The <em>execute</em>-method of ExceptionThrower doesn&rsquo;t get executed immediately because it&rsquo;s wrapped in an anonymous function, i.e.
<em>execute</em> will only be invoked when we call the anonymous function contained in <em>$code</em> in line 5 of <em>assertThrowsException()</em>.</p>

<p>Now one question remains &ndash; can this be done in PHPUnit with a &ldquo;proper&rdquo; assertion?<br/>
Yes, it can!</p>

<p>I won&rsquo;t post the full code into this blog, it would be a bit too much but you can find the code adding a new assertion
<em>assertThrowsException()</em> in the following commit to my fork of PHPUnit 3.5:<br/>
<a href="https://github.com/kiltec/phpunit/commit/dd5c7bd71d6eb8d4b58ce79b5ae069fbb0734354">Link to Github commit</a><br/>
Note that this code is not production-ready, it&rsquo;s a proof-of-concept with just enough code to get PHPUnit to run the
new assertion without throwing a fit, just so I could find out whether such a new assertion would be possible at all.</p>

<p>Anyway, with the new assertion the PHPUnit test-method from the beginning of this blog would look like this:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testSomeImportantMethod</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$someClass</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SomeClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">assertThrowsException</span><span class="p">(</span><span class="s1">&#39;InvalidArgumentException&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span><span class="p">(</span><span class="nv">$someClass</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$someClass</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">someMethod</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Granted, you have more to type than in the current way but in my opinion, this offers more control and is more expressive and I&rsquo;d prefer
expressiveness over terseness any day.</p>

<p>What do you think, should I turn this into a real patch for PHPUnit?<br/>
Or am I just crazy? ;)</p>
]]></content>
  </entry>
  
</feed>
