<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Lars Tesmer's Blog</title>
  <link href="http://www.lars-tesmer.com/atom.xml" rel="self"/>
  <link href="http://www.lars-tesmer.com/"/>
  <updated>2011-08-31T16:04:34+02:00</updated>
  <id>http://www.lars-tesmer.com/</id>
  <author>
    <name>Lars Tesmer</name>
    
  </author>

  
  <entry>
    <title>PHPUnit: Better Syntax for Expecting Exceptions</title>
    <link href="http://www.lars-tesmer.com/blog/2011/08/29/phpunit-better-syntax-for-expecting-exceptions/"/>
    <updated>2011-08-29T18:32:00+02:00</updated>
    <id>http://www.lars-tesmer.com/blog/2011/08/29/phpunit-better-syntax-for-expecting-exceptions</id>
    <content type="html">&lt;p&gt;Recently, while starting to learn Ruby, I've stumbled upon the following code snippet
which demonstrates how you can assert that a piece of code throws as exception in Ruby's Test::Unit:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;Expecting exceptions in Test::Unit  &lt;/span&gt;&lt;/figcaption&gt;
 &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;div class='line'&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_some_important_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;n&quot;&gt;some_obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeObj&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;c1&quot;&gt;# Potentially large amount of code&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;n&quot;&gt;assert_raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InvalidArgumentException&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;        &lt;span class=&quot;n&quot;&gt;some_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;Check out lines 5-7 - isn't this a really elegant and readable way of expecting an exception?
Now let's contrast this with how it's done in PHPUnit:&lt;/p&gt;

&lt;!--more--&gt;




&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;Current way of expecting exceptions in PHPUnit  &lt;/span&gt;&lt;/figcaption&gt;
 &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;div class='line'&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;sd&quot;&gt; * @expectedException InvalidArgumentException&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;sd&quot;&gt; */&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testSomeImportantMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;nv&quot;&gt;$some_obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;c1&quot;&gt;// Potentially large amount of code&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;nv&quot;&gt;$some_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;Well, that isn't too horrible but I've never been really happy with this.&lt;br/&gt;
My main issues with this way of expecting exceptions are:&lt;/p&gt;

&lt;p&gt;The expectation is pretty far away from the location you'd normally expect to find an assertion.
Usually, an assertion can be found at the bottom of each test function, whereas with the current method PHPUnit uses,
it's at the &lt;em&gt;top&lt;/em&gt; of the test-function.&lt;/p&gt;

&lt;p&gt;Additionally, it's an annotation &quot;buried&quot; in a comment which is easy to miss.&lt;/p&gt;

&lt;p&gt;Finally, PHPUnit will watch for an exception thrown by &lt;em&gt;any&lt;/em&gt; of the code inside the test-function. Normally,
it's the last line of the test-function, so it isn't hard to find - but what if the expected exception is thrown in
a line &lt;em&gt;before&lt;/em&gt; the last line, maybe due to a bug?&lt;/p&gt;

&lt;p&gt;So, is there a way to mimic the method of Test::Unit in PHPUnit?&lt;br/&gt;
As you may have guessed, there is one, using anonymous functions and closures, which are available since PHP 5.3!&lt;/p&gt;

&lt;p&gt;Here's the code for a simple function we can use to check if a given piece of code throws an exception:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;span class='line'&gt;14&lt;/span&gt;
&lt;span class='line'&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;div class='line'&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assertThrowsException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$exception_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;        &lt;span class=&quot;nv&quot;&gt;$code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;        &lt;span class=&quot;c1&quot;&gt;// No more code, we only want to catch the exception in $e&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$exception_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Correct exception thrown!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Incorrect exception thrown!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;Confused?&lt;br/&gt;
Well, the most important line of that function is line 5.  &lt;br/&gt;
There, the anonymous function that was passed into the function as the second argument gets executed, which allows
us to catch any exception thrown by it.&lt;/p&gt;

&lt;p&gt;Still confused? Let's check out an example:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;Let's throw an exception, yay!  &lt;/span&gt;&lt;/figcaption&gt;
 &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;span class='line'&gt;10&lt;/span&gt;
&lt;span class='line'&gt;11&lt;/span&gt;
&lt;span class='line'&gt;12&lt;/span&gt;
&lt;span class='line'&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;div class='line'&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExceptionThrower&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\InvalidArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;I&amp;#39;m an exception&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;nv&quot;&gt;$subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ExceptionThrower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;nx&quot;&gt;assertThrowsException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;InvalidArgumentException&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;        &lt;span class=&quot;nv&quot;&gt;$subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;The magic happens in lines 10-13:&lt;br/&gt;
The &lt;em&gt;execute&lt;/em&gt;-method of ExceptionThrower doesn't get executed immediately because it's wrapped in an anonymous function, i.e.
&lt;em&gt;execute&lt;/em&gt; will only be invoked when we call the anonymous function contained in &lt;em&gt;$code&lt;/em&gt; in line 5 of &lt;em&gt;assertThrowsException()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now one question remains - can this be done in PHPUnit with a &quot;proper&quot; assertion?&lt;br/&gt;
Yes, it can!&lt;/p&gt;

&lt;p&gt;I won't post the full code into this blog, it would be a bit too much but you can find the code adding a new assertion
&lt;em&gt;assertThrowsException()&lt;/em&gt; in the following commit to my fork of PHPUnit 3.5:&lt;br/&gt;
&lt;a href=&quot;https://github.com/kiltec/phpunit/commit/dd5c7bd71d6eb8d4b58ce79b5ae069fbb0734354&quot;&gt;Link to Github commit&lt;/a&gt;&lt;br/&gt;
Note that this code is not production-ready, it's a proof-of-concept with just enough code to get PHPUnit to run the
new assertion without throwing a fit, just so I could find out whether such a new assertion would be possible at all.&lt;/p&gt;

&lt;p&gt;Anyway, with the new assertion the PHPUnit test-method from the beginning of this blog would look like this:&lt;/p&gt;

&lt;div&gt;&lt;figure role=code&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class='line'&gt;1&lt;/span&gt;
&lt;span class='line'&gt;2&lt;/span&gt;
&lt;span class='line'&gt;3&lt;/span&gt;
&lt;span class='line'&gt;4&lt;/span&gt;
&lt;span class='line'&gt;5&lt;/span&gt;
&lt;span class='line'&gt;6&lt;/span&gt;
&lt;span class='line'&gt;7&lt;/span&gt;
&lt;span class='line'&gt;8&lt;/span&gt;
&lt;span class='line'&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class='code' width='100%'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;div class='line'&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testSomeImportantMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;nv&quot;&gt;$someClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertThrowsException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;InvalidArgumentException&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$someClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;            &lt;span class=&quot;nv&quot;&gt;$someClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class='line'&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;


&lt;p&gt;Granted, you have more to type than in the current way but in my opinion, this offers more control and is more expressive and I'd prefer
expressiveness over terseness any day.&lt;/p&gt;

&lt;p&gt;What do you think, should I turn this into a real patch for PHPUnit?&lt;br/&gt;
Or am I just crazy? ;)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Colored Diffs in Thunderbird</title>
    <link href="http://www.lars-tesmer.com/blog/2010/10/01/colored-diffs-in-thunderbird/"/>
    <updated>2010-10-01T00:00:00+02:00</updated>
    <id>http://www.lars-tesmer.com/blog/2010/10/01/colored-diffs-in-thunderbird</id>
    <content type="html">&lt;p&gt;
At work we do code review by getting emails with the diff of every commit to our SVN repository. One day I wondered whether there was an addon for Thunderbird to get colored diffs - and sure enough, there was:
&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;
&lt;a href=&quot;http://code.google.com/p/colorediffs/&quot;&gt;colorediffs by Vadim Atlygin&lt;/a&gt; 
&lt;/p&gt;
&lt;p&gt;
It features various display modes, e.g. simple coloring of unified diffs:
&lt;/p&gt;
&lt;img src=&quot;http://www.lars-tesmer.com/images/unified.png&quot; /&gt;&lt;br /&gt;
&lt;p&gt;
Or side-by-side diffs:
&lt;/p&gt;
&lt;img src=&quot;http://www.lars-tesmer.com/images/side-by-side.png&quot; /&gt; &lt;br /&gt;
&lt;p&gt;
As you can see it will also display whitespace characters, if you want to.&lt;br /&gt;
Moreover, you can set the tab width to your preferred value.&lt;br /&gt;
You can find more screenshots &lt;a href=&quot;http://code.google.com/p/colorediffs/wiki/Screenshots&quot;&gt;in the wiki of colorediffs.&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Yet again, another useful Thunderbird-addon making my life a little bit easier.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>No Time to Read That Blog - Read It Later!</title>
    <link href="http://www.lars-tesmer.com/blog/2010/09/29/no-time-to-read-that-blog---read-it-later/"/>
    <updated>2010-09-29T00:00:00+02:00</updated>
    <id>http://www.lars-tesmer.com/blog/2010/09/29/no-time-to-read-that-blog---read-it-later</id>
    <content type="html">&lt;p&gt;
In order to keep up-to-date with what's going on in the tech world, I read a lot of blogs, visit &lt;a href=&quot;http://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt; regularly etc. during my lunch break for example.
&lt;/p&gt;
&lt;p&gt;
Frequently, I will stumble upon seemingly interesting articles but either they're too long to be read during the break or there's no time left to read them.&lt;br /&gt;
What I used to do until a year ago was to move those articles into a bookmark folder called 'toread', in order to remember to read it when I would have more time. But it was always a bit of a hassle, so I was never really satisfied with that solution.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
Then I discovered &lt;a href=&quot;http://readitlaterlist.com/&quot;&gt;Read It Later&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;!--more--&gt;
It's a Firefox Addon that with the click on a button or hitting a keyboard shortcut will save the page you're currently viewing into a list for later access.&lt;br /&gt;
When you have time, you can check out said list and with one click or shortcut, you remove the page from the list and &lt;a href=&quot;http://readitlaterlist.com/&quot;&gt;Read It Later&lt;/a&gt; will get you to the next page you've saved in chronological order.&lt;br /&gt;
Not only that, it also integrates with Google Reader, allowing you to directly save articles without having to leave it.&lt;br /&gt;
Additionally, if you use several computers, you can optionally save the list remotely, so you can access the same list from different computers.&lt;br /&gt;
And there are &lt;a href=&quot;http://readitlaterlist.com/firefox/&quot;&gt;many more features&lt;/a&gt;, for example an API you can use to code your own app.
&lt;/p&gt;
&lt;p&gt;
The way I use it is that I'll put articles into it until I hit the threshold of 100 saved items and when I have time, e.g. during the weekend, I'll go through those items and read them - or rather, not read them.&lt;br /&gt;
That's the beauty about this, often it will turn out that the article or blog I'm getting to isn't that interesting after all and I can quickly move to the next article in the list.&lt;br /&gt;
And that decision is really based on my thinking it isn't interesting and not by feeling under pressure due to lack of time.
&lt;/p&gt;
&lt;p&gt;
This is absolutely one of those Firefox addons I don't want to live without anymore.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Git - How to get better diffs for images</title>
    <link href="http://www.lars-tesmer.com/blog/2010/09/20/git---how-to-get-better-diffs-for-images/"/>
    <updated>2010-09-20T00:00:00+02:00</updated>
    <id>http://www.lars-tesmer.com/blog/2010/09/20/git---how-to-get-better-diffs-for-images</id>
    <content type="html">Have you ever wondered if there's something that would make Git to show better diffs for images?&lt;br /&gt;
Well, here's a really useful addition to one's Git config that will tell Git to use &lt;i&gt;exiftool&lt;/i&gt;
to create diffs of changes made to images:
&lt;!--more--&gt;
&lt;pre&gt;
cd /path_to_project
echo '*.png diff=exif' &gt;&gt; .gitattributes
echo '*.jpg diff=exif' &gt;&gt; .gitattributes
echo '*.gif diff=exif' &gt;&gt; .gitattributes
git config diff.exif.textconv exiftool
&lt;/pre&gt;
From now on, diffs for images will look something like this:&lt;br /&gt;
&lt;pre&gt;
--- a/img.png
+++ b/img.png
@@ -1,7 +1,7 @@
 ExifTool Version Number         : 7.89
-File Size                       : 8.9 kB
+File Size                       : 8.3 kB
 File Modification Date/Time     : 2010:09:20 16:55:41+02:00
 File Type                       : PNG
 MIME Type                       : image/png
-Image Width                     : 58
-Image Height                    : 80
+Image Width                     : 60
+Image Height                    : 87
&lt;/pre&gt;
Nothing spectacular but much more useful than the default.&lt;br /&gt;
Originally, I found this in some slides I read many moons ago.
I tried to find those slides again, unsuccessfully.&lt;br /&gt;
Luckily, I've found another source explaining how to do it:&lt;br /&gt;
&lt;a href=&quot;http://progit.org/book/ch7-2.html&quot;&gt;Chapter 7 of &quot;Pro Git&quot;&lt;/a&gt;&lt;br /&gt;
Thanks, Scott Chacon!&lt;br /&gt;
</content>
  </entry>
  
</feed>
